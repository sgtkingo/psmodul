val2 = binom_disc(x=4, n=10, PI=1/6)
testCase_isEqual(val1,val2)
#TEST 4
val1 = dbinom(x=3, size = 10, prob=1/6)
val2 = binom_disc(x=3, n=10, PI=1/6, "=")
testCase_isEqual(val1,val2)
#TEST 5
val1 = pbinom(q=149, size = 1000, prob=0.2, lower.tail = FALSE)
val2 = binom_disc(x=150, n=1000, PI=0.2, ">=")
testCase_isEqual(val1,val2)
#Test nbinom_disc
#TEST 6
val1 = pnbinom(3, 1, 0.1)
val2 = nbinom_disc(x=4, k=1, PI=0.1, "<=")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(x=120, k=100, PI=0.9, ">=")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(x=120, k=100, PI=0.9, ">")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(x=120, k=100, PI=0.9, ">==")
testCase_isEqual(val1,val2)
detach("package:psmodul", unload = TRUE)
library(psmodul)
library(psmodul)
library(psmodul)
library(psmodul)
testCase_isEqual <- function(value1, value2){
result = FALSE
if( value1 == value2 ){
result = TRUE
cat(sprintf("TEST CASE - IS EQUAL: OK (%.3f == %.3f)", value1, value2))
}
else cat(sprintf("TEST CASE - IS NOT EQUAL: FAIL! (%.3f != %.3f)", value1, value2))
return(result)
}
#Test hypergeo_disc
#TEST 1
val1 = dhyper( 4, m=12, n=8, 4 )
val2 = hypergeo_disc(x=4, N=20, M=12, n=4, "=")
testCase_isEqual(val1,val2)
#TEST 2
val1 = phyper(3,30,70,20)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'<=')
testCase_isEqual(val1,val2)
#TEST 2
val1 = phyper(3,30,70,20, lower.tail = FALSE)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'>')
testCase_isEqual(val1,val2)
#Test binom_disc
#TEST 3
val1 = pbinom(q=4, size = 10, prob=1/6)
val2 = binom_disc(x=4, n=10, PI=1/6)
testCase_isEqual(val1,val2)
#TEST 4
val1 = dbinom(x=3, size = 10, prob=1/6)
val2 = binom_disc(x=3, n=10, PI=1/6, "=")
testCase_isEqual(val1,val2)
#TEST 5
val1 = pbinom(q=149, size = 1000, prob=0.2, lower.tail = FALSE)
val2 = binom_disc(x=150, n=1000, PI=0.2, ">=")
testCase_isEqual(val1,val2)
#Test nbinom_disc
#TEST 6
val1 = pnbinom(3, 1, 0.1)
val2 = nbinom_disc(x=4, k=1, PI=0.1, "<=")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(x=120, k=100, PI=0.9, ">=")
testCase_isEqual(val1,val2)
library(psmodul)
library(psmodul)
testCase_isEqual <- function(value1, value2){
result = FALSE
if( value1 == value2 ){
result = TRUE
cat(sprintf("TEST CASE - IS EQUAL: OK (%.3f == %.3f)", value1, value2))
}
else cat(sprintf("TEST CASE - IS NOT EQUAL: FAIL! (%.3f != %.3f)", value1, value2))
return(result)
}
#Test hypergeo_disc
#TEST 1
val1 = dhyper( 4, m=12, n=8, 4 )
val2 = hypergeo_disc(x=4, N=20, M=12, n=4, "=")
testCase_isEqual(val1,val2)
#TEST 2
val1 = phyper(3,30,70,20)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'<=')
testCase_isEqual(val1,val2)
#TEST 2
val1 = phyper(3,30,70,20, lower.tail = FALSE)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'>')
testCase_isEqual(val1,val2)
#Test binom_disc
#TEST 3
val1 = pbinom(q=4, size = 10, prob=1/6)
val2 = binom_disc(x=4, n=10, PI=1/6)
testCase_isEqual(val1,val2)
#TEST 4
val1 = dbinom(x=3, size = 10, prob=1/6)
val2 = binom_disc(x=3, n=10, PI=1/6, "=")
testCase_isEqual(val1,val2)
#TEST 5
val1 = pbinom(q=149, size = 1000, prob=0.2, lower.tail = FALSE)
val2 = binom_disc(x=150, n=1000, PI=0.2, ">=")
testCase_isEqual(val1,val2)
#Test nbinom_disc
#TEST 6
val1 = pnbinom(3, 1, 0.1)
val2 = nbinom_disc(x=4, k=1, PI=0.1, "<=")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(x=120, k=100, PI=0.9, ">=")
testCase_isEqual(val1,val2)
library(psmodul)
library(psmodul)
library(psmodul)
ppois(1, 4)
#Posloupnost 0 az 40, krok 1
x = seq(0, 40, 1)
y = dpois(x, 20)
#Posloupnost 0 az 40, krok 1
x = seq(0, 40, 1)
y = dpois(x, 20)
plot(x, y)
dpois( 14, 20, lower.tail = FALSE )
#b P > 14
ppois( 14, 20, lower.tail = FALSE )
y = rpois(50,20)
plot(x, y)
y = rpois(40,20)
plot(x, y)
y = rpois(41,20)
plot(x, y)
#Pravidlo 3 sigma = 16*3= 48
x = seq(266-48,266+48,0.1)
y = dnorm(x, mean = 266, sd = 16)
plot(x, y, type = "l")
pnorm(246,mean=266,sd=16)
pnorm(282,mean=266,sd=16) - pnorm(250,mean=266,sd=16)
#d
qnorm(0,9,mean = 266, sd=16)
qnorm(0.9,mean = 266, sd=16)
qnorm(0.1,mean = 266, sd=16)
266 - qnorm(0.1,mean = 266, sd=16)
qnorm(0.9,mean = 266, sd=16)
266 + (266 - qnorm(0.1,mean = 266, sd=16))
#a
x = seq(0,10,0.1)
y = pexp(x, rate=1)
plot(x, y, type = "l")
#a
x = seq(0,5,0.1)
y = pexp(x, rate=1)
plot(x, y, type = "l")
#3
x = seq(0,20,0.1)
y = dweibull(x, shape=2, scale = 7)
plot(x, y, type = "l")
#4
x = seq(0,30,0.1)
y = dunif(x, 0, 30)
plot(x, y, type = "l")
punif(5,0,30)
#Test pois_disc
val1 = ppois(1, 4)
val2 = pois_disc(x=1, t=2, LAMBDA=2, "<=")
testCase_isEqual(val1,val2)
#' Funkce pro vypocet hodnoty Hypergeometric Distribution
#'
#' @param x = hodnota NV
#' @param N = pocet vsech prvku
#' @param M = pocet "spravnych" prvku
#' @param n = pocet vyberu prvku
#' @param logic = "<=" P(X <= x), ">=" P(X >= x), "<" P(X < x), ">" P(X > x), "=" P(X = x)
#' @return Vraci \code{result}:double jako hodnotu pravdepodobnosti
#' @examples
#' hypergeo_disc(4,20,12,4,"=") - 20 piv(svetle, tmave), 12 svetlych, vybirame 4, chceme 4 svetle
#' hypergeo_disc(3,100,30,20) - 100 prvku(bile, cerne), 30 bilych, vybirame 20, chceme MAX 3 bile
#' hypergeo_disc(5,100,30,20,">=") - 100 prvku(bile, cerne), 30 bilych, vybirame 20, chceme alespon 5 bilych
hypergeo_disc <- function(x, N, M, n, logic = "<="){
result = 0.0
reverse_logic = TRUE
type = 'p'
logicOperands <- c("=","<=","<",">",">=")
if (!(logic %in% logicOperands)){
cat(sprintf("\t (!)ERROR: Unknown logic operand! (%s) \n", logic))
return (0.0)
}
switch (logic,
"=" = { type = 'd' },
"<=" = { reverse_logic = TRUE },
"<" = { reverse_logic = TRUE; x = x + 1; },
">" = { reverse_logic = FALSE },
">=" = { reverse_logic = FALSE; x = x - 1; }
)
switch (type,
'd'= { result = dhyper(x, M, N-M, n)},
'p'= { result = phyper(x, M, N-M, n, lower.tail = reverse_logic)},
)
return (result)
}
#' Funkce pro vypocet hodnoty Binomial Distribution
#'
#' @param x = hodnota NV
#' @param n = pocet pokusu
#' @param PI = pravdepodobnost uspechu pokusu
#' @param logic = "<=" P(X <= x), ">=" P(X >= x), "<" P(X < x), ">" P(X > x), "=" P(X = x)
#' @return Vraci \code{result}:double jako hodnotu pravdepodobnosti
#' @examples
#' binom_disc(4,10,1/6) - Hazime 10x kostkou, sance ze padnou nejvysse 4 sestky, sance na 1 sestku: 1/6
#' binom_disc(3,10,1/6,"=") - Hazime 10x kostkou, sance ze padnou presne 3 sestky, sance na 1 sestku: 1/6
#' binom_disc(5,10,1/6, ">") - Hazime 10x kostkou, sance ze padne 5 sestkek a vice, sance na 1 sestku: 1/6
binom_disc <- function(x, n, PI, logic = "<="){
result = 0.0
reverse_logic = TRUE
type = 'p'
logicOperands <- c("=","<=","<",">",">=")
if (!(logic %in% logicOperands)){
cat(sprintf("\t (!)ERROR: Unknown logic operand! (%s) \n", logic))
return (0.0)
}
switch (logic,
"=" = { type = 'd' },
"<=" = { reverse_logic = TRUE },
"<" = { reverse_logic = TRUE; x = x + 1; },
">" = { reverse_logic = FALSE },
">=" = { reverse_logic = FALSE; x = x - 1; }
)
switch (type,
'd'= { result = dbinom(x, n, PI)},
'p'= { result = pbinom(x, n, PI, lower.tail = reverse_logic)},
)
return (result)
}
#' Funkce pro vypocet hodnoty Negative Binomial Distribution
#'
#' @param x = hodnota NV
#' @param k = pocet pokusu k dosazeni uspechu
#' @param PI = pravdepodobnost uspechu pokusu
#' @param logic = "<=" P(X <= x), ">=" P(X >= x), "<" P(X < x), ">" P(X > x), "=" P(X = x)
#' @return Vraci \code{result}:double jako hodnotu pravdepodobnosti
#' @examples
#' nbinom_disc(x=120, k=100, PI=0.9, ">=") - Pravdepodobnost ze vyroste 120 seminek, kdyz vime ze 100 jich vyroste s 90% uspesnosti
nbinom_disc <- function(x, k, PI, logic = "<="){
result = 0.0
reverse_logic = TRUE
type = 'p'
#uprava pro R definici
x = x - k
logicOperands <- c("=","<=","<",">",">=")
if (!(logic %in% logicOperands)){
cat(sprintf("\t (!)ERROR: Unknown logic operand! (%s) \n", logic))
return (0.0)
}
switch (logic,
"=" = { type = 'd' },
"<=" = { reverse_logic = TRUE },
"<" = { reverse_logic = TRUE; x = x + 1; },
">" = { reverse_logic = FALSE },
">=" = { reverse_logic = FALSE; x = x - 1; }
)
switch (type,
'd'= { result = dnbinom(x, k, PI)},
'p'= { result = pnbinom(x, k, PI, lower.tail = reverse_logic)},
)
return (result)
}
#' Funkce pro vypocet hodnoty Poisson Distribution
#'
#' @param x = hodnota NV
#' @param t = pocet casovych useku
#' @param LAMBDA = vyskytovost / casovy usek
#' @param logic = "<=" P(X <= x), ">=" P(X >= x), "<" P(X < x), ">" P(X > x), "=" P(X = x)
#' @return Vraci \code{result}:double jako hodnotu pravdepodobnosti
#' @examples
#'
pois_disc <- function(x, t, LAMBDA, logic = "<="){
result = 0.0
reverse_logic = TRUE
type = 'p'
#uprava pro R definici
x = x - k
logicOperands <- c("=","<=","<",">",">=")
if (!(logic %in% logicOperands)){
cat(sprintf("\t (!)ERROR: Unknown logic operand! (%s) \n", logic))
return (0.0)
}
switch (logic,
"=" = { type = 'd' },
"<=" = { reverse_logic = TRUE },
"<" = { reverse_logic = TRUE; x = x + 1; },
">" = { reverse_logic = FALSE },
">=" = { reverse_logic = FALSE; x = x - 1; }
)
switch (type,
'd'= { result = dpois(x, t*LAMBDA)},
'p'= { result = ppois(x, t*LAMBDA, lower.tail = reverse_logic)},
)
return (result)
}
#Test pois_disc
val1 = ppois(1, 4)
val2 = pois_disc(x=1, t=2, LAMBDA=2, "<=")
testCase_isEqual(val1,val2)
library(psmodul)
#Test pois_disc
val1 = ppois(1, 4)
val2 = pois_disc(x=1, t=2, LAMBDA=2, "<=")
testCase_isEqual(val1,val2)
library(psmodul)
library(psmodul)
library(psmodul)
library(psmodul)
val1 = dhyper( 4, m=12, n=8, 4 )
val2 = hypergeo_disc(x=4, N=20, M=12, n=4, "=")
testCase_isEqual(val1,val2)
#//////////////////////////////////////////////////////////////////////////////////////
#EDA - Exploration Data Analysis
#//////////////////////////////////////////////////////////////////////////////////////
#Práce se soubory
# Nastavení pracovního adresáře na složku source file, případne jeji podskožku subfir
SetWorkingDirectoryToSource <-function(subdir=""){
# Nastavení pracovního adresáře na složku source file
WD <- dirname(rstudioapi::getSourceEditorContext()$path);
# Podsložka
if( subdir != "" )WD <- paste(WD,subdir,sep = "/");
if (!is.null(WD)) setwd(WD);
return(WD);
}
#Vrací načtený Excel sheet jako DataFrame
ReadExcel <-function(file="", sheet="", colNames=NULL){
#Načtení dat ve standartním předpřipraveném formatu, col_names defaultne načteny z excelu
data = read_excel("data_std_raw.xlsx", sheet = "S1")
#Přejmenuji sloupce na použitelné názvy
if( !is.null(colNames) )colnames(data) = colNames;
#Convertuji datový typ na dataframe
data = as.data.frame(data);
return(data)
}
#//////////////////////////////////////////////////////////////////////////////////////
#Overeni normalniho rozdeleni datasetu
#Vrací TRUE - je normalniho rozdeli, FALSE = není N
IsNorm <- function(skewness, kurtosis){
result = (skewness > -2.0 && skewness < 2.0);
result = result & (kurtosis > -2.0 && kurtosis < 2.0);
return(result);
}
#Všechny statistické charkteristiky pro vybraný sloupec -> dplyr
GetStats <- function(data, colName){
stats <-  summarise(.data = data,
dataLenght = length(.data[[colName]]),
minimum = min(.data[[colName]], na.rm=T),     # preventivní na.rm=T
Q1 = quantile(.data[[colName]], 0.25, na.rm=T),
mean = mean(.data[[colName]], na.rm=T),
median = median(.data[[colName]], na.rm=T),
Q3 = quantile(.data[[colName]], 0.75, na.rm=T),
maximum = max(.data[[colName]], na.rm=T),
D = var(.data[[colName]], na.rm=T),
sigma = sd(.data[[colName]],na.rm=T),
var_coef_perct = (100*(sigma/mean)),  # variační koeficient v procentech
skewness = (moments::skewness(.data[[colName]], na.rm=T)),       # preventivní specifikace balíčku moments
kurtosis = (moments::kurtosis(.data[[colName]], na.rm=T)-3),
norm = ifelse(IsNorm(skewness, kurtosis), "N", "not-N") #urci zda ma normalni rozdeleni
)
return(stats);
}
#Všechny statistické charkteristiky pro vybraný sloupec -> dplyr zhlukovaná pomocí groupBy - groupColName
GetStatsWithGroupBy <- function(data, colName, groupColName){
stats <-
group_by(.data = data, .data[[groupColName]]) %>%
summarise(        dataLenght = length(.data[[colName]]),
minimum = min(.data[[colName]], na.rm=T),     # preventivní na.rm=T
Q1 = quantile(.data[[colName]], 0.25, na.rm=T),
mean = mean(.data[[colName]], na.rm=T),
median = median(.data[[colName]], na.rm=T),
Q3 = quantile(.data[[colName]], 0.75, na.rm=T),
maximum = max(.data[[colName]], na.rm=T),
D = var(.data[[colName]], na.rm=T),
sigma = sd(.data[[colName]],na.rm=T),
var_coef_perct = (100*(sigma/mean)),  # variační koeficient v procentech
skewness = (moments::skewness(.data[[colName]], na.rm=T)),       # preventivní specifikace balíčku moments
kurtosis = (moments::kurtosis(.data[[colName]], na.rm=T)-3),
norm = ifelse(IsNorm(skewness, kurtosis), "N", "not-N") #urci zda ma normalni rozdeleni
)
return(stats);
}
#Vrací vnitřní hradby DM, HM, a Odlehlá pozorování + BoxPlot
#Výsledek vrací jako DataFrame, kde Outer jsou Odlehlá pozorování, IQR je IQR, LB je dolní mez, HB je horní mez
GetBordersAndOutValues_AsBoxPlot <- function(data, title="No title", y_name="Y", x_name="", color="lightblue", size=3.0){
#Omezeni
sigma = sd(data,na.rm=T);
limMin = min(data) - size*sigma; #min
limMax = max(data) + size*sigma; #max
#Odlehlé hodnoty a boxplot
boxplt = boxplot(data,
main = title,
ylab = y_name,
xlab = x_name,
col = color,
ylim= c(limMin,limMax))
#Odlehlá pozorování
outer = boxplt$out
# Použití vnitřních hradeb - obecnější postup - uvedeno bez ohledu na výrobce!!!
IQR = IQR(data)
DM = quantile(data, 0.25, na.rm=T) - 1.5*IQR  # výpočet dolní mezi vnitřních hradeb
HM = quantile(data, 0.75, na.rm=T) + 1.5*IQR  # výpočet horní mezi vnitřních hradeb
result <- matrix(c(outer,IQR,DM,HM),ncol=4,byrow=TRUE);
colnames(result) <- c("Outer","IQR","LB","HB");
result <- as.data.frame(result);
return(result);
}
#//////////////////////////////////////////////////////////////////////////////////////
library(psmodul)
library(psmodul)
library(psmodul)
library(psmodul)
#//////////////////////////////////////////////////////////////////////////////////////
#############################     DU1S - PS      #####################################
################       KoneÄŤnĂ˝ JiĹ™Ă­, kon0327    #####################################
#//////////////////////////////////////////////////////////////////////////////////////
# Aktivace knihovny (nutno opakovat pĹ™i kaĹľdĂ©m novĂ©m spuĹˇtÄ›nĂ­ Rka, vhodnĂ© mĂ­t na zaÄŤĂˇtku skriptu)
library(readxl)
library(moments)
library(rstudioapi)
#ÄŚĂ­selnĂ© charakteristiky
library(dplyr)
library(psmodul)
#//////////////////////////////////////////////////////////////////////////////////////
#NastavenĂ­ WD
SetWorkingDirectoryToSource(subdir = "data");
#//////////////////////////////////////////////////////////////////////////////////////
#PĹ™Ă­prava dat
#//////////////////////////////////////////////////////////////////////////////////////
#NaÄŤtenĂ­ dat z Excelu
data = ReadExcel(file="data_std_raw.xlsx", sheet = "S1", colNames = c("ID","lux_tmp_22","lux_tmp_5","producer") )
#ZmÄ›nĂ­m vĂ˝robce na dt factor
data$producer = as.factor(data$producer)
#VytvoĹ™Ă­me novĂ˝ DF bez NA hodnot
dataS = na.omit(data) # vynechĂˇme Ĺ™Ăˇdky s NA hodnotami
#//////////////////////////////////////////////////////////////////////////////////////
#ExploraÄŤnĂ­ analĂ˝za - EDA
#//////////////////////////////////////////////////////////////////////////////////////
# ProhlĂ©dnÄ›me si varianty/kategorie promÄ›nnĂ©
levels(dataS$producer) # v uvedenĂ©m poĹ™adĂ­ a podobÄ› se budou takĂ© automaticky Ĺ™adit v tabulkĂˇch i grafech
# Tabulka absolutnĂ­ch ÄŤetnostĂ­ kategoriĂˇlnĂ­ promÄ›nnĂ© vĂ˝robce
#cetnostiVyrobce = table(dataS$producer)
#cetnostiVyrobce  # vĂ˝pis - objekt typu "table"
# UrÄŤenĂ­ rozsahu vĂ˝bÄ›ru (tj. poÄŤet statistickĂ˝ch jednotek - poÄŤet zaĹ™ivek)
if( length(dataS$ID) == length(data$ID) ){
print("Pro data i dataS je poÄŤet zĂˇznamu roven - oÄŤekĂˇvĂˇme shodnĂ© vĂ˝sledky EDA analĂ˝zy.")
}
#//////////////////////////////////////////////////////////////////////////////////////
#PĹ™esnÄ› ruÄŤnÄ› - nahrazeno dplyr summarise!
#min(dataS$lux_tmp_5) #min
#max(dataS$lux_tmp_5) #max
#mean(dataS$lux_tmp_5) #prumer
#quantile(dataS$lux_tmp_5, probs = 0.5) #media
#quantile(dataS$lux_tmp_5, probs = 0.75) #horni quartil
#quantile(dataS$lux_tmp_5, probs = 0.25) #dolni quartil
#//////////////////////////////////////////////////////////////////////////////////////
#ZĂˇkladnĂ­ ÄŤĂ­selnĂ© charakteristiky dat pĹ™i 5 st.
summary(dataS$lux_tmp_5) #Zaokrouhluje!
#PĹ™esnĂ© ÄŤĂ­selnĂ© charakteristiky dat pĹ™i 5 st.
GetStats(data = dataS, colName = "lux_tmp_5")
# PĹ™esnĂ© hodnoty dle vĂ˝robce
#tapply(dataS$lux_tmp_5, dataS$producer, mean, na.rm = T) #prĹŻmÄ›r
#tapply(dataS$lux_tmp_5, dataS$producer, quantile, probs = 0.5, na.rm = T) #median
#nebo
GetStatsWithGroupBy(data = dataS, colName = "lux_tmp_5", groupColName = "producer")
#OdlehlĂ© hodnoty a boxplot
borders = GetBordersAndOutValues_AsBoxPlot(data = dataS$lux_tmp_5, title = "SvÄ›telnĂ˝ tok pĹ™i 5 st. C (lux)", y_name = "SvÄ›telnĂ˝ tok (lux)")
borders
#Odstraneni odlehlĂ˝ch pozorovĂˇnĂ­
dataS$lux_tmp_5_no_out = dataS$lux_tmp_5
dataS$lux_tmp_5_no_out[dataS$lux_tmp_5>=borders$HB | dataS$lux_tmp_5<=borders$LB] = NA
#ZĂˇkladnĂ­ ÄŤĂ­selnĂ© charakteristiky dat pĹ™i 5 st. bez odlehlĂ˝ch pozorovĂˇnĂ­
summary(dataS$lux_tmp_5_no_out) #Zaokrouhluje!
#PĹ™esnĂ© ÄŤĂ­selnĂ© charakteristiky dat pĹ™i 5 st.bez odlehlĂ˝ch pozorovĂˇnĂ­
GetStats(data = dataS, colName = "lux_tmp_5_no_out")
#Dle vyrobce
GetStatsWithGroupBy(data = dataS, colName = "lux_tmp_5", groupColName = "producer")
#//////////////////////////////////////////////////////////////////////////////////////
#ZĂˇkladnĂ­ ÄŤĂ­selnĂ© charakteristiky dat pĹ™i 22 st.
summary(dataS$lux_tmp_22) #Zaokrouhluje
library(psmodul)
library(psmodul)
# Aktivace knihovny (nutno opakovat pĹ™i kaĹľdĂ©m novĂ©m spuĹˇtÄ›nĂ­ Rka, vhodnĂ© mĂ­t na zaÄŤĂˇtku skriptu)
library(readxl)
#//////////////////////////////////////////////////////////////////////////////////////
#NastavenĂ­ WD
SetWorkingDirectoryToSource(subdir = "data");
#NaÄŤtenĂ­ dat z Excelu
data = ReadExcel(file="data_std_raw.xlsx", sheet = "S1", colNames = c("ID","lux_tmp_22","lux_tmp_5","producer") )
View(data)
View(borders)
library(psmodul)
library(psmodul)
library(psmodul)
library(psmodul)
library(psmodul)
library(psmodul)
library(readxl)
library(psmodul)
