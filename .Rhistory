val2 = nbinom_disc(20, 100, 0.9, ">")
testCase_isEqual(val1,val2)
binom_disc
#TEST 3
val1 = pbinom(q=4, size = 10, prob=1/6)
val2 = binom_disc(x=4, n=10, PI=1/6)
testCase_isEqual(val1,val2)
#TEST 4
val1 = dbinom(x=3, size = 10, prob=1/6)
val2 = binom_disc(x=3, n=10, PI=1/6, "=")
testCase_isEqual(val1,val2)
val1 = dbinom(x=3, size = 10, prob=1/6)
val1 = dbinom(x=3, size = 10, prob=1/6)
val2 = binom_disc(x=3, n=10, PI=1/6, "=")
testCase_isEqual(val1,val2)
library(psmodul)
library(psmodul)
testCase_isEqual <- function(value1, value2){
result = FALSE
if( value1 == value2 ){
result = TRUE
cat(sprintf("TEST CASE - IS EQUAL: OK (%.3f == %.3f)", value1, value2))
}
else cat(sprintf("TEST CASE - IS NOT EQUAL: FAIL! (%.3f != %.3f)", value1, value2))
return(result)
}
#TEST 3
val1 = pbinom(q=4, size = 10, prob=1/6)
val2 = binom_disc(x=4, n=10, PI=1/6)
testCase_isEqual(val1,val2)
#TEST 3
val1 = pbinom(q=4, size = 10, prob=1/6)
val2 = binom_disc(x=4, n=10, PI=1/6)
testCase_isEqual(val1,val2)
#TEST 4
val1 = dbinom(x=3, size = 10, prob=1/6)
val2 = binom_disc(x=3, n=10, PI=1/6, "=")
testCase_isEqual(val1,val2)
#TEST 5
val1 = pbinom(q=149, size = 1000, prob=0.2, lower.tail = FALSE)
val2 = binom_disc(x=150, n=1000, PI=0.2, ">=")
#TEST 5
val1 = pbinom(q=149, size = 1000, prob=0.2, lower.tail = FALSE)
val2 = binom_disc(x=150, n=1000, PI=0.2, ">=")
testCase_isEqual(val1,val2)
#TEST 6
val1 = pnbinom(3, 1, 0.1)
val2 = nbinom_disc(4, 1, 0.1, "<=")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(20, 100, 0.9, ">=")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(20, 100, 0.9, ">")
testCase_isEqual(val1,val2)
library(psmodul)
library(psmodul)
testCase_isEqual <- function(value1, value2){
result = FALSE
if( value1 == value2 ){
result = TRUE
cat(sprintf("TEST CASE - IS EQUAL: OK (%.3f == %.3f)", value1, value2))
}
else cat(sprintf("TEST CASE - IS NOT EQUAL: FAIL! (%.3f != %.3f)", value1, value2))
return(result)
}
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(20, 100, 0.9, ">==")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(20, 100, 0.9, ">=")
testCase_isEqual(val1,val2)
library(psmodul)
testCase_isEqual <- function(value1, value2){
result = FALSE
if( value1 == value2 ){
result = TRUE
cat(sprintf("TEST CASE - IS EQUAL: OK (%.3f == %.3f)", value1, value2))
}
else cat(sprintf("TEST CASE - IS NOT EQUAL: FAIL! (%.3f != %.3f)", value1, value2))
return(result)
}
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(20, 100, 0.9, ">==")
testCase_isEqual(val1,val2)
library(psmodul)
library(psmodul)
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(20, 100, 0.9, ">==")
testCase_isEqual(val1,val2)
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(20, 100, 0.9, ">=")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(20, 100, 0.9, ">")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(120, 100, 0.9, ">")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(120, 100, 0.9, ">=")
testCase_isEqual(val1,val2)
#TEST 6
val1 = pnbinom(3, 1, 0.1)
val2 = nbinom_disc(4, 1, 0.1, "<=")
testCase_isEqual(val1,val2)
testCase_isEqual <- function(value1, value2){
result = FALSE
if( value1 == value2 ){
result = TRUE
cat(sprintf("TEST CASE - IS EQUAL: OK (%.3f == %.3f)", value1, value2))
}
else cat(sprintf("TEST CASE - IS NOT EQUAL: FAIL! (%.3f != %.3f)", value1, value2))
return(result)
}
#Test hypergeo_disc
#TEST 1
val1 = dhyper( 4, m=12, n=8, 4 )
val2 = hypergeo_disc(x=4, N=20, M=12, n=4, "=" )
testCase_isEqual(val1,val2)
#TEST 2
val1 = phyper(3,30,70,20)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'<=')
testCase_isEqual(val1,val2)
#TEST 2
val1 = phyper(3,30,70,20, lower.tail = FALSE)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'>')
testCase_isEqual(val1,val2)
#Test binom_disc
#TEST 3
val1 = pbinom(q=4, size = 10, prob=1/6)
val2 = binom_disc(x=4, n=10, PI=1/6)
testCase_isEqual(val1,val2)
#TEST 4
val1 = dbinom(x=3, size = 10, prob=1/6)
val2 = binom_disc(x=3, n=10, PI=1/6, "=")
testCase_isEqual(val1,val2)
#TEST 5
val1 = pbinom(q=149, size = 1000, prob=0.2, lower.tail = FALSE)
val2 = binom_disc(x=150, n=1000, PI=0.2, ">=")
testCase_isEqual(val1,val2)
#Test nbinom_disc
#TEST 6
val1 = pnbinom(3, 1, 0.1)
val2 = nbinom_disc(x=4, k=1, PI=0.1, "<=")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(x=120, k=100, PI=0.9, ">=")
testCase_isEqual(val1,val2)
library(psmodul)
library(psmodul)
library(psmodul)
library(psmodul)
#TEST 2
val1 = phyper(3,30,70,20, lower.tail = FALSE)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'>')
testCase_isEqual(val1,val2)
testCase_isEqual <- function(value1, value2){
result = FALSE
if( value1 == value2 ){
result = TRUE
cat(sprintf("TEST CASE - IS EQUAL: OK (%.3f == %.3f)", value1, value2))
}
else cat(sprintf("TEST CASE - IS NOT EQUAL: FAIL! (%.3f != %.3f)", value1, value2))
return(result)
}
#Test hypergeo_disc
#TEST 1
val1 = dhyper( 4, m=12, n=8, 4 )
val2 = hypergeo_disc(x=4, N=20, M=12, n=4, "=")
testCase_isEqual(val1,val2)
#TEST 2
val1 = phyper(3,30,70,20)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'<=')
testCase_isEqual(val1,val2)
#TEST 2
val1 = phyper(3,30,70,20, lower.tail = FALSE)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'>')
testCase_isEqual(val1,val2)
#Test binom_disc
#TEST 3
val1 = pbinom(q=4, size = 10, prob=1/6)
val2 = binom_disc(x=4, n=10, PI=1/6)
testCase_isEqual(val1,val2)
#TEST 4
val1 = dbinom(x=3, size = 10, prob=1/6)
val2 = binom_disc(x=3, n=10, PI=1/6, "=")
testCase_isEqual(val1,val2)
#TEST 5
val1 = pbinom(q=149, size = 1000, prob=0.2, lower.tail = FALSE)
val2 = binom_disc(x=150, n=1000, PI=0.2, ">=")
testCase_isEqual(val1,val2)
#Test nbinom_disc
#TEST 6
val1 = pnbinom(3, 1, 0.1)
val2 = nbinom_disc(x=4, k=1, PI=0.1, "<=")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(x=120, k=100, PI=0.9, ">=")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(x=120, k=100, PI=0.9, ">")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(x=120, k=100, PI=0.9, ">==")
testCase_isEqual(val1,val2)
detach("package:psmodul", unload = TRUE)
library(psmodul)
library(psmodul)
library(psmodul)
library(psmodul)
testCase_isEqual <- function(value1, value2){
result = FALSE
if( value1 == value2 ){
result = TRUE
cat(sprintf("TEST CASE - IS EQUAL: OK (%.3f == %.3f)", value1, value2))
}
else cat(sprintf("TEST CASE - IS NOT EQUAL: FAIL! (%.3f != %.3f)", value1, value2))
return(result)
}
#Test hypergeo_disc
#TEST 1
val1 = dhyper( 4, m=12, n=8, 4 )
val2 = hypergeo_disc(x=4, N=20, M=12, n=4, "=")
testCase_isEqual(val1,val2)
#TEST 2
val1 = phyper(3,30,70,20)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'<=')
testCase_isEqual(val1,val2)
#TEST 2
val1 = phyper(3,30,70,20, lower.tail = FALSE)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'>')
testCase_isEqual(val1,val2)
#Test binom_disc
#TEST 3
val1 = pbinom(q=4, size = 10, prob=1/6)
val2 = binom_disc(x=4, n=10, PI=1/6)
testCase_isEqual(val1,val2)
#TEST 4
val1 = dbinom(x=3, size = 10, prob=1/6)
val2 = binom_disc(x=3, n=10, PI=1/6, "=")
testCase_isEqual(val1,val2)
#TEST 5
val1 = pbinom(q=149, size = 1000, prob=0.2, lower.tail = FALSE)
val2 = binom_disc(x=150, n=1000, PI=0.2, ">=")
testCase_isEqual(val1,val2)
#Test nbinom_disc
#TEST 6
val1 = pnbinom(3, 1, 0.1)
val2 = nbinom_disc(x=4, k=1, PI=0.1, "<=")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(x=120, k=100, PI=0.9, ">=")
testCase_isEqual(val1,val2)
library(psmodul)
library(psmodul)
testCase_isEqual <- function(value1, value2){
result = FALSE
if( value1 == value2 ){
result = TRUE
cat(sprintf("TEST CASE - IS EQUAL: OK (%.3f == %.3f)", value1, value2))
}
else cat(sprintf("TEST CASE - IS NOT EQUAL: FAIL! (%.3f != %.3f)", value1, value2))
return(result)
}
#Test hypergeo_disc
#TEST 1
val1 = dhyper( 4, m=12, n=8, 4 )
val2 = hypergeo_disc(x=4, N=20, M=12, n=4, "=")
testCase_isEqual(val1,val2)
#TEST 2
val1 = phyper(3,30,70,20)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'<=')
testCase_isEqual(val1,val2)
#TEST 2
val1 = phyper(3,30,70,20, lower.tail = FALSE)
val2 = hypergeo_disc(x=3, N=100, M=30, n=20,'>')
testCase_isEqual(val1,val2)
#Test binom_disc
#TEST 3
val1 = pbinom(q=4, size = 10, prob=1/6)
val2 = binom_disc(x=4, n=10, PI=1/6)
testCase_isEqual(val1,val2)
#TEST 4
val1 = dbinom(x=3, size = 10, prob=1/6)
val2 = binom_disc(x=3, n=10, PI=1/6, "=")
testCase_isEqual(val1,val2)
#TEST 5
val1 = pbinom(q=149, size = 1000, prob=0.2, lower.tail = FALSE)
val2 = binom_disc(x=150, n=1000, PI=0.2, ">=")
testCase_isEqual(val1,val2)
#Test nbinom_disc
#TEST 6
val1 = pnbinom(3, 1, 0.1)
val2 = nbinom_disc(x=4, k=1, PI=0.1, "<=")
testCase_isEqual(val1,val2)
#TEST 7
val1 = pnbinom(19, 100, 0.9, lower.tail = FALSE)
val2 = nbinom_disc(x=120, k=100, PI=0.9, ">=")
testCase_isEqual(val1,val2)
library(psmodul)
library(psmodul)
library(psmodul)
ppois(1, 4)
#Posloupnost 0 az 40, krok 1
x = seq(0, 40, 1)
y = dpois(x, 20)
#Posloupnost 0 az 40, krok 1
x = seq(0, 40, 1)
y = dpois(x, 20)
plot(x, y)
dpois( 14, 20, lower.tail = FALSE )
#b P > 14
ppois( 14, 20, lower.tail = FALSE )
y = rpois(50,20)
plot(x, y)
y = rpois(40,20)
plot(x, y)
y = rpois(41,20)
plot(x, y)
#Pravidlo 3 sigma = 16*3= 48
x = seq(266-48,266+48,0.1)
y = dnorm(x, mean = 266, sd = 16)
plot(x, y, type = "l")
pnorm(246,mean=266,sd=16)
pnorm(282,mean=266,sd=16) - pnorm(250,mean=266,sd=16)
#d
qnorm(0,9,mean = 266, sd=16)
qnorm(0.9,mean = 266, sd=16)
qnorm(0.1,mean = 266, sd=16)
266 - qnorm(0.1,mean = 266, sd=16)
qnorm(0.9,mean = 266, sd=16)
266 + (266 - qnorm(0.1,mean = 266, sd=16))
#a
x = seq(0,10,0.1)
y = pexp(x, rate=1)
plot(x, y, type = "l")
#a
x = seq(0,5,0.1)
y = pexp(x, rate=1)
plot(x, y, type = "l")
#3
x = seq(0,20,0.1)
y = dweibull(x, shape=2, scale = 7)
plot(x, y, type = "l")
#4
x = seq(0,30,0.1)
y = dunif(x, 0, 30)
plot(x, y, type = "l")
punif(5,0,30)
#Test pois_disc
val1 = ppois(1, 4)
val2 = pois_disc(x=1, t=2, LAMBDA=2, "<=")
testCase_isEqual(val1,val2)
#' Funkce pro vypocet hodnoty Hypergeometric Distribution
#'
#' @param x = hodnota NV
#' @param N = pocet vsech prvku
#' @param M = pocet "spravnych" prvku
#' @param n = pocet vyberu prvku
#' @param logic = "<=" P(X <= x), ">=" P(X >= x), "<" P(X < x), ">" P(X > x), "=" P(X = x)
#' @return Vraci \code{result}:double jako hodnotu pravdepodobnosti
#' @examples
#' hypergeo_disc(4,20,12,4,"=") - 20 piv(svetle, tmave), 12 svetlych, vybirame 4, chceme 4 svetle
#' hypergeo_disc(3,100,30,20) - 100 prvku(bile, cerne), 30 bilych, vybirame 20, chceme MAX 3 bile
#' hypergeo_disc(5,100,30,20,">=") - 100 prvku(bile, cerne), 30 bilych, vybirame 20, chceme alespon 5 bilych
hypergeo_disc <- function(x, N, M, n, logic = "<="){
result = 0.0
reverse_logic = TRUE
type = 'p'
logicOperands <- c("=","<=","<",">",">=")
if (!(logic %in% logicOperands)){
cat(sprintf("\t (!)ERROR: Unknown logic operand! (%s) \n", logic))
return (0.0)
}
switch (logic,
"=" = { type = 'd' },
"<=" = { reverse_logic = TRUE },
"<" = { reverse_logic = TRUE; x = x + 1; },
">" = { reverse_logic = FALSE },
">=" = { reverse_logic = FALSE; x = x - 1; }
)
switch (type,
'd'= { result = dhyper(x, M, N-M, n)},
'p'= { result = phyper(x, M, N-M, n, lower.tail = reverse_logic)},
)
return (result)
}
#' Funkce pro vypocet hodnoty Binomial Distribution
#'
#' @param x = hodnota NV
#' @param n = pocet pokusu
#' @param PI = pravdepodobnost uspechu pokusu
#' @param logic = "<=" P(X <= x), ">=" P(X >= x), "<" P(X < x), ">" P(X > x), "=" P(X = x)
#' @return Vraci \code{result}:double jako hodnotu pravdepodobnosti
#' @examples
#' binom_disc(4,10,1/6) - Hazime 10x kostkou, sance ze padnou nejvysse 4 sestky, sance na 1 sestku: 1/6
#' binom_disc(3,10,1/6,"=") - Hazime 10x kostkou, sance ze padnou presne 3 sestky, sance na 1 sestku: 1/6
#' binom_disc(5,10,1/6, ">") - Hazime 10x kostkou, sance ze padne 5 sestkek a vice, sance na 1 sestku: 1/6
binom_disc <- function(x, n, PI, logic = "<="){
result = 0.0
reverse_logic = TRUE
type = 'p'
logicOperands <- c("=","<=","<",">",">=")
if (!(logic %in% logicOperands)){
cat(sprintf("\t (!)ERROR: Unknown logic operand! (%s) \n", logic))
return (0.0)
}
switch (logic,
"=" = { type = 'd' },
"<=" = { reverse_logic = TRUE },
"<" = { reverse_logic = TRUE; x = x + 1; },
">" = { reverse_logic = FALSE },
">=" = { reverse_logic = FALSE; x = x - 1; }
)
switch (type,
'd'= { result = dbinom(x, n, PI)},
'p'= { result = pbinom(x, n, PI, lower.tail = reverse_logic)},
)
return (result)
}
#' Funkce pro vypocet hodnoty Negative Binomial Distribution
#'
#' @param x = hodnota NV
#' @param k = pocet pokusu k dosazeni uspechu
#' @param PI = pravdepodobnost uspechu pokusu
#' @param logic = "<=" P(X <= x), ">=" P(X >= x), "<" P(X < x), ">" P(X > x), "=" P(X = x)
#' @return Vraci \code{result}:double jako hodnotu pravdepodobnosti
#' @examples
#' nbinom_disc(x=120, k=100, PI=0.9, ">=") - Pravdepodobnost ze vyroste 120 seminek, kdyz vime ze 100 jich vyroste s 90% uspesnosti
nbinom_disc <- function(x, k, PI, logic = "<="){
result = 0.0
reverse_logic = TRUE
type = 'p'
#uprava pro R definici
x = x - k
logicOperands <- c("=","<=","<",">",">=")
if (!(logic %in% logicOperands)){
cat(sprintf("\t (!)ERROR: Unknown logic operand! (%s) \n", logic))
return (0.0)
}
switch (logic,
"=" = { type = 'd' },
"<=" = { reverse_logic = TRUE },
"<" = { reverse_logic = TRUE; x = x + 1; },
">" = { reverse_logic = FALSE },
">=" = { reverse_logic = FALSE; x = x - 1; }
)
switch (type,
'd'= { result = dnbinom(x, k, PI)},
'p'= { result = pnbinom(x, k, PI, lower.tail = reverse_logic)},
)
return (result)
}
#' Funkce pro vypocet hodnoty Poisson Distribution
#'
#' @param x = hodnota NV
#' @param t = pocet casovych useku
#' @param LAMBDA = vyskytovost / casovy usek
#' @param logic = "<=" P(X <= x), ">=" P(X >= x), "<" P(X < x), ">" P(X > x), "=" P(X = x)
#' @return Vraci \code{result}:double jako hodnotu pravdepodobnosti
#' @examples
#'
pois_disc <- function(x, t, LAMBDA, logic = "<="){
result = 0.0
reverse_logic = TRUE
type = 'p'
#uprava pro R definici
x = x - k
logicOperands <- c("=","<=","<",">",">=")
if (!(logic %in% logicOperands)){
cat(sprintf("\t (!)ERROR: Unknown logic operand! (%s) \n", logic))
return (0.0)
}
switch (logic,
"=" = { type = 'd' },
"<=" = { reverse_logic = TRUE },
"<" = { reverse_logic = TRUE; x = x + 1; },
">" = { reverse_logic = FALSE },
">=" = { reverse_logic = FALSE; x = x - 1; }
)
switch (type,
'd'= { result = dpois(x, t*LAMBDA)},
'p'= { result = ppois(x, t*LAMBDA, lower.tail = reverse_logic)},
)
return (result)
}
#Test pois_disc
val1 = ppois(1, 4)
val2 = pois_disc(x=1, t=2, LAMBDA=2, "<=")
testCase_isEqual(val1,val2)
library(psmodul)
#Test pois_disc
val1 = ppois(1, 4)
val2 = pois_disc(x=1, t=2, LAMBDA=2, "<=")
testCase_isEqual(val1,val2)
library(psmodul)
library(psmodul)
library(psmodul)
